{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import toast from 'react-hot-toast';\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [sortBy, setSortBy] = useState('created_at');\n//   const [sortOrder, setSortOrder] = useState('DESC');\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   // const [editingUser, setEditingUser] = useState(null); // 🔒 Commented out edit state\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, [searchTerm, sortBy, sortOrder]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const params = new URLSearchParams({\n//         search: searchTerm,\n//         sortBy,\n//         sortOrder\n//       });\n\n//       const response = await axios.get(`/api/users?${params}`);\n//       setUsers(response.data.users);\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//       toast.error('Failed to load users');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDeleteUser = async (userId) => {\n//     if (!window.confirm('Are you sure you want to delete this user?')) {\n//       return;\n//     }\n\n//     try {\n//       await axios.delete(`/api/users/${userId}`);\n//       toast.success('User deleted successfully');\n//       fetchUsers();\n//     } catch (error) {\n//       const message = error.response?.data?.error || 'Failed to delete user';\n//       toast.error(message);\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading users...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px' }}>\n//         <h1>User Management</h1>\n//         <button\n//           className=\"btn btn-success\"\n//           onClick={() => setShowAddModal(true)}\n//         >\n//           Add New User\n//         </button>\n//       </div>\n\n//       <div className=\"search-bar\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search users by name or email...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//           className=\"form-control\"\n//         />\n//       </div>\n\n//       <div className=\"filters\">\n//         <div className=\"filter-group\">\n//           <label>Sort by:</label>\n//           <select\n//             value={sortBy}\n//             onChange={(e) => setSortBy(e.target.value)}\n//             className=\"form-control\"\n//           >\n//             <option value=\"name\">Name</option>\n//             <option value=\"email\">Email</option>\n//             <option value=\"role\">Role</option>\n//             <option value=\"created_at\">Created Date</option>\n//           </select>\n//         </div>\n\n//         <div className=\"filter-group\">\n//           <label>Order:</label>\n//           <select\n//             value={sortOrder}\n//             onChange={(e) => setSortOrder(e.target.value)}\n//             className=\"form-control\"\n//           >\n//             <option value=\"ASC\">Ascending</option>\n//             <option value=\"DESC\">Descending</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       <div className=\"card\">\n//         {users.length === 0 ? (\n//           <p>No users found. Try adjusting your search criteria.</p>\n//         ) : (\n//           <div className=\"table-responsive\">\n//             <table className=\"table\">\n//               <thead>\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Role</th>\n//                   <th>Created</th>\n//                   {/* <th>Actions</th> */}\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map((user) => (\n//                   <tr key={user.id}>\n//                     <td>{user.name}</td>\n//                     <td>{user.email}</td>\n//                     <td>\n//                       <span style={{\n//                         padding: '4px 8px',\n//                         borderRadius: '4px',\n//                         fontSize: '12px',\n//                         fontWeight: 'bold',\n//                         backgroundColor:\n//                           user.role === 'admin' ? '#dc3545' :\n//                             user.role === 'store_owner' ? '#ffc107' : '#28a745',\n//                         color: user.role === 'store_owner' ? '#212529' : 'white'\n//                       }}>\n//                         {user.role.toUpperCase()}\n//                       </span>\n//                     </td>\n//                     <td>{new Date(user.created_at).toLocaleDateString()}</td>\n//                     {/* <td>\n//                       <button\n//                         className=\"btn btn-warning btn-sm\"\n//                         onClick={() => setEditingUser(user)}\n//                         style={{ marginRight: '10px' }}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger btn-sm\"\n//                         onClick={() => handleDeleteUser(user.id)}\n//                         style={{ marginTop: '10px' }}\n//                       >\n//                         Delete\n//                       </button>\n//                     </td> */}\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n\n//       {showAddModal && (\n//         <AddUserModal\n//           onClose={() => setShowAddModal(false)}\n//           onSuccess={() => {\n//             setShowAddModal(false);\n//             fetchUsers();\n//           }}\n//         />\n//       )}\n\n//       {/* {editingUser && (\n//         <EditUserModal\n//           user={editingUser}\n//           onClose={() => setEditingUser(null)}\n//           onSuccess={() => {\n//             setEditingUser(null);\n//             fetchUsers();\n//           }}\n//         />\n//       )} */}\n//     </div>\n//   );\n// };\n\n// const AddUserModal = ({ onClose, onSuccess }) => {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     password: '',\n//     role: 'user'\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       await axios.post('/api/users', formData);\n//       toast.success('User created successfully');\n//       onSuccess();\n//     } catch (error) {\n//       const message = error.response?.data?.error || 'Failed to create user';\n//       toast.error(message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div style={{\n//       position: 'fixed',\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//       display: 'flex',\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       zIndex: 1000\n//     }}>\n//       <div className=\"card\" style={{ maxWidth: '500px', width: '90%' }}>\n//         <h3>Add New User</h3>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Name</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               value={formData.name}\n//               onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//               required\n//               minLength=\"20\"\n//               maxLength=\"60\"\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Email</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               value={formData.email}\n//               onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               value={formData.password}\n//               onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//               required\n//               minLength=\"8\"\n//               maxLength=\"16\"\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Role</label>\n//             <select\n//               className=\"form-control\"\n//               value={formData.role}\n//               onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n//             >\n//               <option value=\"user\">User</option>\n//               <option value=\"store_owner\">Store Owner</option>\n//               <option value=\"admin\">Admin</option>\n//             </select>\n//           </div>\n\n//           <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               onClick={onClose}\n//               disabled={loading}\n//             >\n//               Cancel\n//             </button>\n//             <button\n//               type=\"submit\"\n//               className=\"btn btn-primary\"\n//               disabled={loading}\n//             >\n//               {loading ? 'Creating...' : 'Create User'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // ❌ EditUserModal fully disabled\n// // const EditUserModal = ({ user, onClose, onSuccess }) => { ... };\n\n// export default UserManagement;","map":{"version":3,"names":[],"sources":["C:/Users/ayush bhure/OneDrive/Desktop/backup/App/frontend/src/components/admin/UserManagement.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import toast from 'react-hot-toast';\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [sortBy, setSortBy] = useState('created_at');\n//   const [sortOrder, setSortOrder] = useState('DESC');\n//   const [showAddModal, setShowAddModal] = useState(false);\n//   // const [editingUser, setEditingUser] = useState(null); // 🔒 Commented out edit state\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, [searchTerm, sortBy, sortOrder]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const params = new URLSearchParams({\n//         search: searchTerm,\n//         sortBy,\n//         sortOrder\n//       });\n\n//       const response = await axios.get(`/api/users?${params}`);\n//       setUsers(response.data.users);\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//       toast.error('Failed to load users');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDeleteUser = async (userId) => {\n//     if (!window.confirm('Are you sure you want to delete this user?')) {\n//       return;\n//     }\n\n//     try {\n//       await axios.delete(`/api/users/${userId}`);\n//       toast.success('User deleted successfully');\n//       fetchUsers();\n//     } catch (error) {\n//       const message = error.response?.data?.error || 'Failed to delete user';\n//       toast.error(message);\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading users...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px' }}>\n//         <h1>User Management</h1>\n//         <button\n//           className=\"btn btn-success\"\n//           onClick={() => setShowAddModal(true)}\n//         >\n//           Add New User\n//         </button>\n//       </div>\n\n//       <div className=\"search-bar\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search users by name or email...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//           className=\"form-control\"\n//         />\n//       </div>\n\n//       <div className=\"filters\">\n//         <div className=\"filter-group\">\n//           <label>Sort by:</label>\n//           <select\n//             value={sortBy}\n//             onChange={(e) => setSortBy(e.target.value)}\n//             className=\"form-control\"\n//           >\n//             <option value=\"name\">Name</option>\n//             <option value=\"email\">Email</option>\n//             <option value=\"role\">Role</option>\n//             <option value=\"created_at\">Created Date</option>\n//           </select>\n//         </div>\n\n//         <div className=\"filter-group\">\n//           <label>Order:</label>\n//           <select\n//             value={sortOrder}\n//             onChange={(e) => setSortOrder(e.target.value)}\n//             className=\"form-control\"\n//           >\n//             <option value=\"ASC\">Ascending</option>\n//             <option value=\"DESC\">Descending</option>\n//           </select>\n//         </div>\n//       </div>\n\n//       <div className=\"card\">\n//         {users.length === 0 ? (\n//           <p>No users found. Try adjusting your search criteria.</p>\n//         ) : (\n//           <div className=\"table-responsive\">\n//             <table className=\"table\">\n//               <thead>\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Role</th>\n//                   <th>Created</th>\n//                   {/* <th>Actions</th> */}\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map((user) => (\n//                   <tr key={user.id}>\n//                     <td>{user.name}</td>\n//                     <td>{user.email}</td>\n//                     <td>\n//                       <span style={{\n//                         padding: '4px 8px',\n//                         borderRadius: '4px',\n//                         fontSize: '12px',\n//                         fontWeight: 'bold',\n//                         backgroundColor:\n//                           user.role === 'admin' ? '#dc3545' :\n//                             user.role === 'store_owner' ? '#ffc107' : '#28a745',\n//                         color: user.role === 'store_owner' ? '#212529' : 'white'\n//                       }}>\n//                         {user.role.toUpperCase()}\n//                       </span>\n//                     </td>\n//                     <td>{new Date(user.created_at).toLocaleDateString()}</td>\n//                     {/* <td>\n//                       <button\n//                         className=\"btn btn-warning btn-sm\"\n//                         onClick={() => setEditingUser(user)}\n//                         style={{ marginRight: '10px' }}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger btn-sm\"\n//                         onClick={() => handleDeleteUser(user.id)}\n//                         style={{ marginTop: '10px' }}\n//                       >\n//                         Delete\n//                       </button>\n//                     </td> */}\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n\n//       {showAddModal && (\n//         <AddUserModal\n//           onClose={() => setShowAddModal(false)}\n//           onSuccess={() => {\n//             setShowAddModal(false);\n//             fetchUsers();\n//           }}\n//         />\n//       )}\n\n//       {/* {editingUser && (\n//         <EditUserModal\n//           user={editingUser}\n//           onClose={() => setEditingUser(null)}\n//           onSuccess={() => {\n//             setEditingUser(null);\n//             fetchUsers();\n//           }}\n//         />\n//       )} */}\n//     </div>\n//   );\n// };\n\n// const AddUserModal = ({ onClose, onSuccess }) => {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     password: '',\n//     role: 'user'\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n\n//     try {\n//       await axios.post('/api/users', formData);\n//       toast.success('User created successfully');\n//       onSuccess();\n//     } catch (error) {\n//       const message = error.response?.data?.error || 'Failed to create user';\n//       toast.error(message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div style={{\n//       position: 'fixed',\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//       display: 'flex',\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       zIndex: 1000\n//     }}>\n//       <div className=\"card\" style={{ maxWidth: '500px', width: '90%' }}>\n//         <h3>Add New User</h3>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Name</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               value={formData.name}\n//               onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n//               required\n//               minLength=\"20\"\n//               maxLength=\"60\"\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Email</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               value={formData.email}\n//               onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//               required\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               value={formData.password}\n//               onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//               required\n//               minLength=\"8\"\n//               maxLength=\"16\"\n//             />\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Role</label>\n//             <select\n//               className=\"form-control\"\n//               value={formData.role}\n//               onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n//             >\n//               <option value=\"user\">User</option>\n//               <option value=\"store_owner\">Store Owner</option>\n//               <option value=\"admin\">Admin</option>\n//             </select>\n//           </div>\n\n//           <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               onClick={onClose}\n//               disabled={loading}\n//             >\n//               Cancel\n//             </button>\n//             <button\n//               type=\"submit\"\n//               className=\"btn btn-primary\"\n//               disabled={loading}\n//             >\n//               {loading ? 'Creating...' : 'Create User'}\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // ❌ EditUserModal fully disabled\n// // const EditUserModal = ({ user, onClose, onSuccess }) => { ... };\n\n// export default UserManagement;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}